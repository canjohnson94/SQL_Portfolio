-- [1] Retrieve all the rows of data present in our table album?
SELECT *
FROM album;

-- [2] How many rows of data are present in our table customers?
SELECT 
	COUNT(*)
FROM customers;

-- [3] In order to show sample rows to the top management, write a query to show only 5 rows from the table artist.
SELECT *
FROM artist
LIMIT 5;

-- [4] Write a query to retrieve the unique playlist in our database.
SELECT 
	DISTINCT playlist_name
FROM playlist;

-- [5]  Write a query to fetch the unique artists present in our database?
SELECT 
	DISTINCT artist_name
FROM artist;

-- [6] Write a query to count the customers in the country of Brazil?
SELECT
	 COUNT(DISTINCT customer_id) AS count_of_cust
FROM customers
WHERE customer_country = 'Brazil';


-- [7] Write a query to count the number of artists?
SELECT 
	COUNT(artist_id) AS count_of_artists
FROM artist;

-- [8] Write a query to count the number of customers in the countries of Brazil, Germany, and Canada.
SELECT
	COUNT(customer_id) as count_of_cust
FROM customers
WHERE customer_country IN ("Brazil","Germany","Canada");

-- [9] Write a query to retrieve information about customers with customer IDs ranging from 1 to 10.
SELECT *
FROM customers
WHERE customer_id BETWEEN 1 AND 10;

-- [10] Write a query to fetch the details of the tracks whose duration is between 100000 and 500000 and whose price is 0.99.
SELECT *
FROM tracks
WHERE (milliseconds BETWEEN 100000 AND 500000) AND (unit_price = .99)
ORDER BY milliseconds DESC;


-- [11] Write a query to get all the details for the customers whose first name starts with L?
SELECT *
FROM customers
WHERE first_name LIKE 'L%';

-- [12] Write a query to get all the details for the customers whose first name ends with L?
SELECT *
FROM customers
WHERE first_name LIKE '%L';

-- [13] Write a query to fetch the details of the customer whose first name is Dan.
SELECT *
FROM customers
WHERE first_name LIKE 'Dan';

-- [14] Write a query to fetch the details of the tracks whose unit price should not be equal to $0.99 and also the genre ID should not be equal to 18.
SELECT *
FROM tracks
WHERE unit_price != '.99' AND genre_id != '18'
ORDER BY genre_id ASC;

-- [15] Write a query to fetch the details of the tracks where the unit price is greater than 0.99 $?
SELECT * 
FROM tracks
WHERE unit_price > 0.99;


-- [16] Write a query to fetch the details of the tracks whose genre id is 18.
SELECT 
	track_id,
    track_name
FROM tracks
WHERE genre_id = 18;

-- [17] Write a query to fetch the details of the tracks for the genre id greater than 18?
SELECT 
	track_id,
    track_name
FROM tracks
WHERE genre_id > 18
ORDER BY genre_id ASC;

-- [18]  Write a query to fetch the invoices for the billing city of Edmonton, and also the billing price should be greater than 8 dollars.
SELECT *
FROM invoice
WHERE billing_city = 'Edmonton' AND total_price > 8;

-- [19] Write a query to fetch the invoices whose billing city is Berlin or Paris and the invoice date is 2009-02-01.
SELECT *
FROM invoice 
WHERE invoice_date = '2009-02-01' AND (billing_city = 'Berlin' OR billing_city = 'Paris');
